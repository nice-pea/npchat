package service

// History используется для ведения логов на уровне Юзкейсов,
// для операций Create, Update и Delete, то есть модифицирующих данные.
//
// Пример:
// В условном Юзкейсе "Отправить пользователю приглашение в чат"
// подразумевается создание новых записей "приглашение в чат" в хранилище, это значит
// что фактическое создание записи будет сопровождаться фактической записью произошедшего в историю.
//
// Вопрос: А что делать если Юзкейс завершился с ошибкой и транзакции в БД откатили?
// Ответ: Соответственно и записи в историю, выполненные в этом Юзкейсе не должны быть записаны.
// Для более ясной картины, возможно следовало назвать интерфейс как HistoryPage,
// а если пойти дальше, в контроллере должен быть интерфейс шире этого и содержать
// методы Commit и Rollback, таким образом HistoryPage мы расцениваем как объект транзакции.
type History interface {
	// Write добавляет запись на страницу истории.
	// Параметры:
	//	typ - уникальный идентификатор типа записи, примеры: "inviteCreate", "inviteDelete", "inviteUpdate"
	//	props - структура или карта с параметрами произошедшего события, пример*: SubjectID, ObjectUserID
	// 	*В примере subject - действующее лицо, object - дополнение, в отношение кого применялось действие;
	Write(typ string, props any)
}

type HistoryDummy struct{} // TODO: использовался для запуска теста, сейчас можно удалить либо перенести в тот тест

func (h HistoryDummy) Write(typ string, props any) {}
