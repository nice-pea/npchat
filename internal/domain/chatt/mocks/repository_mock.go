// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mockChatt

import (
	"github.com/nice-pea/npchat/internal/domain/chatt"
	mock "github.com/stretchr/testify/mock"
)

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

type Repository_Expecter struct {
	mock *mock.Mock
}

func (_m *Repository) EXPECT() *Repository_Expecter {
	return &Repository_Expecter{mock: &_m.Mock}
}

// InTransaction provides a mock function for the type Repository
func (_mock *Repository) InTransaction(fn func(txRepo chatt.Repository) error) error {
	ret := _mock.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for InTransaction")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(func(txRepo chatt.Repository) error) error); ok {
		r0 = returnFunc(fn)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Repository_InTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InTransaction'
type Repository_InTransaction_Call struct {
	*mock.Call
}

// InTransaction is a helper method to define mock.On call
//   - fn func(txRepo chatt.Repository) error
func (_e *Repository_Expecter) InTransaction(fn interface{}) *Repository_InTransaction_Call {
	return &Repository_InTransaction_Call{Call: _e.mock.On("InTransaction", fn)}
}

func (_c *Repository_InTransaction_Call) Run(run func(fn func(txRepo chatt.Repository) error)) *Repository_InTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 func(txRepo chatt.Repository) error
		if args[0] != nil {
			arg0 = args[0].(func(txRepo chatt.Repository) error)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Repository_InTransaction_Call) Return(err error) *Repository_InTransaction_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Repository_InTransaction_Call) RunAndReturn(run func(fn func(txRepo chatt.Repository) error) error) *Repository_InTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function for the type Repository
func (_mock *Repository) List(filter chatt.Filter) ([]chatt.Chat, error) {
	ret := _mock.Called(filter)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []chatt.Chat
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(chatt.Filter) ([]chatt.Chat, error)); ok {
		return returnFunc(filter)
	}
	if returnFunc, ok := ret.Get(0).(func(chatt.Filter) []chatt.Chat); ok {
		r0 = returnFunc(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]chatt.Chat)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(chatt.Filter) error); ok {
		r1 = returnFunc(filter)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Repository_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type Repository_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - filter chatt.Filter
func (_e *Repository_Expecter) List(filter interface{}) *Repository_List_Call {
	return &Repository_List_Call{Call: _e.mock.On("List", filter)}
}

func (_c *Repository_List_Call) Run(run func(filter chatt.Filter)) *Repository_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 chatt.Filter
		if args[0] != nil {
			arg0 = args[0].(chatt.Filter)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Repository_List_Call) Return(chats []chatt.Chat, err error) *Repository_List_Call {
	_c.Call.Return(chats, err)
	return _c
}

func (_c *Repository_List_Call) RunAndReturn(run func(filter chatt.Filter) ([]chatt.Chat, error)) *Repository_List_Call {
	_c.Call.Return(run)
	return _c
}

// Upsert provides a mock function for the type Repository
func (_mock *Repository) Upsert(chat chatt.Chat) error {
	ret := _mock.Called(chat)

	if len(ret) == 0 {
		panic("no return value specified for Upsert")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(chatt.Chat) error); ok {
		r0 = returnFunc(chat)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Repository_Upsert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Upsert'
type Repository_Upsert_Call struct {
	*mock.Call
}

// Upsert is a helper method to define mock.On call
//   - chat chatt.Chat
func (_e *Repository_Expecter) Upsert(chat interface{}) *Repository_Upsert_Call {
	return &Repository_Upsert_Call{Call: _e.mock.On("Upsert", chat)}
}

func (_c *Repository_Upsert_Call) Run(run func(chat chatt.Chat)) *Repository_Upsert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 chatt.Chat
		if args[0] != nil {
			arg0 = args[0].(chatt.Chat)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Repository_Upsert_Call) Return(err error) *Repository_Upsert_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Repository_Upsert_Call) RunAndReturn(run func(chat chatt.Chat) error) *Repository_Upsert_Call {
	_c.Call.Return(run)
	return _c
}
