// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mockJwtParser

import (
	"time"

	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// NewRegistry creates a new instance of Registry. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRegistry(t interface {
	mock.TestingT
	Cleanup(func())
}) *Registry {
	mock := &Registry{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Registry is an autogenerated mock type for the Registry type
type Registry struct {
	mock.Mock
}

type Registry_Expecter struct {
	mock *mock.Mock
}

func (_m *Registry) EXPECT() *Registry_Expecter {
	return &Registry_Expecter{mock: &_m.Mock}
}

// IssueTime provides a mock function for the type Registry
func (_mock *Registry) IssueTime(sessionID uuid.UUID) (time.Time, error) {
	ret := _mock.Called(sessionID)

	if len(ret) == 0 {
		panic("no return value specified for IssueTime")
	}

	var r0 time.Time
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID) (time.Time, error)); ok {
		return returnFunc(sessionID)
	}
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID) time.Time); ok {
		r0 = returnFunc(sessionID)
	} else {
		r0 = ret.Get(0).(time.Time)
	}
	if returnFunc, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = returnFunc(sessionID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Registry_IssueTime_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IssueTime'
type Registry_IssueTime_Call struct {
	*mock.Call
}

// IssueTime is a helper method to define mock.On call
//   - sessionID uuid.UUID
func (_e *Registry_Expecter) IssueTime(sessionID interface{}) *Registry_IssueTime_Call {
	return &Registry_IssueTime_Call{Call: _e.mock.On("IssueTime", sessionID)}
}

func (_c *Registry_IssueTime_Call) Run(run func(sessionID uuid.UUID)) *Registry_IssueTime_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 uuid.UUID
		if args[0] != nil {
			arg0 = args[0].(uuid.UUID)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Registry_IssueTime_Call) Return(time1 time.Time, err error) *Registry_IssueTime_Call {
	_c.Call.Return(time1, err)
	return _c
}

func (_c *Registry_IssueTime_Call) RunAndReturn(run func(sessionID uuid.UUID) (time.Time, error)) *Registry_IssueTime_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterIssueTime provides a mock function for the type Registry
func (_mock *Registry) RegisterIssueTime(sessionID uuid.UUID, issueTime time.Time) error {
	ret := _mock.Called(sessionID, issueTime)

	if len(ret) == 0 {
		panic("no return value specified for RegisterIssueTime")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID, time.Time) error); ok {
		r0 = returnFunc(sessionID, issueTime)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Registry_RegisterIssueTime_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterIssueTime'
type Registry_RegisterIssueTime_Call struct {
	*mock.Call
}

// RegisterIssueTime is a helper method to define mock.On call
//   - sessionID uuid.UUID
//   - issueTime time.Time
func (_e *Registry_Expecter) RegisterIssueTime(sessionID interface{}, issueTime interface{}) *Registry_RegisterIssueTime_Call {
	return &Registry_RegisterIssueTime_Call{Call: _e.mock.On("RegisterIssueTime", sessionID, issueTime)}
}

func (_c *Registry_RegisterIssueTime_Call) Run(run func(sessionID uuid.UUID, issueTime time.Time)) *Registry_RegisterIssueTime_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 uuid.UUID
		if args[0] != nil {
			arg0 = args[0].(uuid.UUID)
		}
		var arg1 time.Time
		if args[1] != nil {
			arg1 = args[1].(time.Time)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Registry_RegisterIssueTime_Call) Return(err error) *Registry_RegisterIssueTime_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Registry_RegisterIssueTime_Call) RunAndReturn(run func(sessionID uuid.UUID, issueTime time.Time) error) *Registry_RegisterIssueTime_Call {
	_c.Call.Return(run)
	return _c
}
