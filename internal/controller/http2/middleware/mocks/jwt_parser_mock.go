// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mockMiddleware

import (
	"github.com/nice-pea/npchat/internal/controller/http2/middleware"
	mock "github.com/stretchr/testify/mock"
)

// NewJwtParser creates a new instance of JwtParser. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewJwtParser(t interface {
	mock.TestingT
	Cleanup(func())
}) *JwtParser {
	mock := &JwtParser{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// JwtParser is an autogenerated mock type for the JwtParser type
type JwtParser struct {
	mock.Mock
}

type JwtParser_Expecter struct {
	mock *mock.Mock
}

func (_m *JwtParser) EXPECT() *JwtParser_Expecter {
	return &JwtParser_Expecter{mock: &_m.Mock}
}

// Parse provides a mock function for the type JwtParser
func (_mock *JwtParser) Parse(token string) (middleware.OutJwt, error) {
	ret := _mock.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for Parse")
	}

	var r0 middleware.OutJwt
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (middleware.OutJwt, error)); ok {
		return returnFunc(token)
	}
	if returnFunc, ok := ret.Get(0).(func(string) middleware.OutJwt); ok {
		r0 = returnFunc(token)
	} else {
		r0 = ret.Get(0).(middleware.OutJwt)
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(token)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// JwtParser_Parse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Parse'
type JwtParser_Parse_Call struct {
	*mock.Call
}

// Parse is a helper method to define mock.On call
//   - token string
func (_e *JwtParser_Expecter) Parse(token interface{}) *JwtParser_Parse_Call {
	return &JwtParser_Parse_Call{Call: _e.mock.On("Parse", token)}
}

func (_c *JwtParser_Parse_Call) Run(run func(token string)) *JwtParser_Parse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *JwtParser_Parse_Call) Return(outJwt middleware.OutJwt, err error) *JwtParser_Parse_Call {
	_c.Call.Return(outJwt, err)
	return _c
}

func (_c *JwtParser_Parse_Call) RunAndReturn(run func(token string) (middleware.OutJwt, error)) *JwtParser_Parse_Call {
	_c.Call.Return(run)
	return _c
}
