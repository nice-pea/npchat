// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mockRegisterHandler

import (
	"github.com/nice-pea/npchat/internal/usecases/users/oauth/init_oauth_login"
	mock "github.com/stretchr/testify/mock"
)

// NewUsecasesForOAuthInitLogin creates a new instance of UsecasesForOAuthInitLogin. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUsecasesForOAuthInitLogin(t interface {
	mock.TestingT
	Cleanup(func())
}) *UsecasesForOAuthInitLogin {
	mock := &UsecasesForOAuthInitLogin{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// UsecasesForOAuthInitLogin is an autogenerated mock type for the UsecasesForOAuthInitLogin type
type UsecasesForOAuthInitLogin struct {
	mock.Mock
}

type UsecasesForOAuthInitLogin_Expecter struct {
	mock *mock.Mock
}

func (_m *UsecasesForOAuthInitLogin) EXPECT() *UsecasesForOAuthInitLogin_Expecter {
	return &UsecasesForOAuthInitLogin_Expecter{mock: &_m.Mock}
}

// InitOAuthLogin provides a mock function for the type UsecasesForOAuthInitLogin
func (_mock *UsecasesForOAuthInitLogin) InitOAuthLogin(in initOAuthLogin.In) (initOAuthLogin.Out, error) {
	ret := _mock.Called(in)

	if len(ret) == 0 {
		panic("no return value specified for InitOAuthLogin")
	}

	var r0 initOAuthLogin.Out
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(initOAuthLogin.In) (initOAuthLogin.Out, error)); ok {
		return returnFunc(in)
	}
	if returnFunc, ok := ret.Get(0).(func(initOAuthLogin.In) initOAuthLogin.Out); ok {
		r0 = returnFunc(in)
	} else {
		r0 = ret.Get(0).(initOAuthLogin.Out)
	}
	if returnFunc, ok := ret.Get(1).(func(initOAuthLogin.In) error); ok {
		r1 = returnFunc(in)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// UsecasesForOAuthInitLogin_InitOAuthLogin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InitOAuthLogin'
type UsecasesForOAuthInitLogin_InitOAuthLogin_Call struct {
	*mock.Call
}

// InitOAuthLogin is a helper method to define mock.On call
//   - in initOAuthLogin.In
func (_e *UsecasesForOAuthInitLogin_Expecter) InitOAuthLogin(in interface{}) *UsecasesForOAuthInitLogin_InitOAuthLogin_Call {
	return &UsecasesForOAuthInitLogin_InitOAuthLogin_Call{Call: _e.mock.On("InitOAuthLogin", in)}
}

func (_c *UsecasesForOAuthInitLogin_InitOAuthLogin_Call) Run(run func(in initOAuthLogin.In)) *UsecasesForOAuthInitLogin_InitOAuthLogin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 initOAuthLogin.In
		if args[0] != nil {
			arg0 = args[0].(initOAuthLogin.In)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *UsecasesForOAuthInitLogin_InitOAuthLogin_Call) Return(out initOAuthLogin.Out, err error) *UsecasesForOAuthInitLogin_InitOAuthLogin_Call {
	_c.Call.Return(out, err)
	return _c
}

func (_c *UsecasesForOAuthInitLogin_InitOAuthLogin_Call) RunAndReturn(run func(in initOAuthLogin.In) (initOAuthLogin.Out, error)) *UsecasesForOAuthInitLogin_InitOAuthLogin_Call {
	_c.Call.Return(run)
	return _c
}
