// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mockRegisterHandler

import (
	"github.com/nice-pea/npchat/internal/usecases/chats/chat_members"
	"github.com/nice-pea/npchat/internal/usecases/sessions/find_session"
	mock "github.com/stretchr/testify/mock"
)

// NewUsecasesForChatMembers creates a new instance of UsecasesForChatMembers. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUsecasesForChatMembers(t interface {
	mock.TestingT
	Cleanup(func())
}) *UsecasesForChatMembers {
	mock := &UsecasesForChatMembers{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// UsecasesForChatMembers is an autogenerated mock type for the UsecasesForChatMembers type
type UsecasesForChatMembers struct {
	mock.Mock
}

type UsecasesForChatMembers_Expecter struct {
	mock *mock.Mock
}

func (_m *UsecasesForChatMembers) EXPECT() *UsecasesForChatMembers_Expecter {
	return &UsecasesForChatMembers_Expecter{mock: &_m.Mock}
}

// ChatMembers provides a mock function for the type UsecasesForChatMembers
func (_mock *UsecasesForChatMembers) ChatMembers(in chatMembers.In) (chatMembers.Out, error) {
	ret := _mock.Called(in)

	if len(ret) == 0 {
		panic("no return value specified for ChatMembers")
	}

	var r0 chatMembers.Out
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(chatMembers.In) (chatMembers.Out, error)); ok {
		return returnFunc(in)
	}
	if returnFunc, ok := ret.Get(0).(func(chatMembers.In) chatMembers.Out); ok {
		r0 = returnFunc(in)
	} else {
		r0 = ret.Get(0).(chatMembers.Out)
	}
	if returnFunc, ok := ret.Get(1).(func(chatMembers.In) error); ok {
		r1 = returnFunc(in)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// UsecasesForChatMembers_ChatMembers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ChatMembers'
type UsecasesForChatMembers_ChatMembers_Call struct {
	*mock.Call
}

// ChatMembers is a helper method to define mock.On call
//   - in chatMembers.In
func (_e *UsecasesForChatMembers_Expecter) ChatMembers(in interface{}) *UsecasesForChatMembers_ChatMembers_Call {
	return &UsecasesForChatMembers_ChatMembers_Call{Call: _e.mock.On("ChatMembers", in)}
}

func (_c *UsecasesForChatMembers_ChatMembers_Call) Run(run func(in chatMembers.In)) *UsecasesForChatMembers_ChatMembers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 chatMembers.In
		if args[0] != nil {
			arg0 = args[0].(chatMembers.In)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *UsecasesForChatMembers_ChatMembers_Call) Return(out chatMembers.Out, err error) *UsecasesForChatMembers_ChatMembers_Call {
	_c.Call.Return(out, err)
	return _c
}

func (_c *UsecasesForChatMembers_ChatMembers_Call) RunAndReturn(run func(in chatMembers.In) (chatMembers.Out, error)) *UsecasesForChatMembers_ChatMembers_Call {
	_c.Call.Return(run)
	return _c
}

// FindSessions provides a mock function for the type UsecasesForChatMembers
func (_mock *UsecasesForChatMembers) FindSessions(in findSession.In) (findSession.Out, error) {
	ret := _mock.Called(in)

	if len(ret) == 0 {
		panic("no return value specified for FindSessions")
	}

	var r0 findSession.Out
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(findSession.In) (findSession.Out, error)); ok {
		return returnFunc(in)
	}
	if returnFunc, ok := ret.Get(0).(func(findSession.In) findSession.Out); ok {
		r0 = returnFunc(in)
	} else {
		r0 = ret.Get(0).(findSession.Out)
	}
	if returnFunc, ok := ret.Get(1).(func(findSession.In) error); ok {
		r1 = returnFunc(in)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// UsecasesForChatMembers_FindSessions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindSessions'
type UsecasesForChatMembers_FindSessions_Call struct {
	*mock.Call
}

// FindSessions is a helper method to define mock.On call
//   - in findSession.In
func (_e *UsecasesForChatMembers_Expecter) FindSessions(in interface{}) *UsecasesForChatMembers_FindSessions_Call {
	return &UsecasesForChatMembers_FindSessions_Call{Call: _e.mock.On("FindSessions", in)}
}

func (_c *UsecasesForChatMembers_FindSessions_Call) Run(run func(in findSession.In)) *UsecasesForChatMembers_FindSessions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 findSession.In
		if args[0] != nil {
			arg0 = args[0].(findSession.In)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *UsecasesForChatMembers_FindSessions_Call) Return(out findSession.Out, err error) *UsecasesForChatMembers_FindSessions_Call {
	_c.Call.Return(out, err)
	return _c
}

func (_c *UsecasesForChatMembers_FindSessions_Call) RunAndReturn(run func(in findSession.In) (findSession.Out, error)) *UsecasesForChatMembers_FindSessions_Call {
	_c.Call.Return(run)
	return _c
}
