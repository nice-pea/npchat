// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mockRegisterHandler

import (
	"github.com/nice-pea/npchat/internal/usecases/users/oauth/complete_oauth_login"
	mock "github.com/stretchr/testify/mock"
)

// NewUsecasesForOAuthCompleteLoginCallback creates a new instance of UsecasesForOAuthCompleteLoginCallback. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUsecasesForOAuthCompleteLoginCallback(t interface {
	mock.TestingT
	Cleanup(func())
}) *UsecasesForOAuthCompleteLoginCallback {
	mock := &UsecasesForOAuthCompleteLoginCallback{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// UsecasesForOAuthCompleteLoginCallback is an autogenerated mock type for the UsecasesForOAuthCompleteLoginCallback type
type UsecasesForOAuthCompleteLoginCallback struct {
	mock.Mock
}

type UsecasesForOAuthCompleteLoginCallback_Expecter struct {
	mock *mock.Mock
}

func (_m *UsecasesForOAuthCompleteLoginCallback) EXPECT() *UsecasesForOAuthCompleteLoginCallback_Expecter {
	return &UsecasesForOAuthCompleteLoginCallback_Expecter{mock: &_m.Mock}
}

// CompleteOAuthLogin provides a mock function for the type UsecasesForOAuthCompleteLoginCallback
func (_mock *UsecasesForOAuthCompleteLoginCallback) CompleteOAuthLogin(in completeOAuthLogin.In) (completeOAuthLogin.Out, error) {
	ret := _mock.Called(in)

	if len(ret) == 0 {
		panic("no return value specified for CompleteOAuthLogin")
	}

	var r0 completeOAuthLogin.Out
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(completeOAuthLogin.In) (completeOAuthLogin.Out, error)); ok {
		return returnFunc(in)
	}
	if returnFunc, ok := ret.Get(0).(func(completeOAuthLogin.In) completeOAuthLogin.Out); ok {
		r0 = returnFunc(in)
	} else {
		r0 = ret.Get(0).(completeOAuthLogin.Out)
	}
	if returnFunc, ok := ret.Get(1).(func(completeOAuthLogin.In) error); ok {
		r1 = returnFunc(in)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// UsecasesForOAuthCompleteLoginCallback_CompleteOAuthLogin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CompleteOAuthLogin'
type UsecasesForOAuthCompleteLoginCallback_CompleteOAuthLogin_Call struct {
	*mock.Call
}

// CompleteOAuthLogin is a helper method to define mock.On call
//   - in completeOAuthLogin.In
func (_e *UsecasesForOAuthCompleteLoginCallback_Expecter) CompleteOAuthLogin(in interface{}) *UsecasesForOAuthCompleteLoginCallback_CompleteOAuthLogin_Call {
	return &UsecasesForOAuthCompleteLoginCallback_CompleteOAuthLogin_Call{Call: _e.mock.On("CompleteOAuthLogin", in)}
}

func (_c *UsecasesForOAuthCompleteLoginCallback_CompleteOAuthLogin_Call) Run(run func(in completeOAuthLogin.In)) *UsecasesForOAuthCompleteLoginCallback_CompleteOAuthLogin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 completeOAuthLogin.In
		if args[0] != nil {
			arg0 = args[0].(completeOAuthLogin.In)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *UsecasesForOAuthCompleteLoginCallback_CompleteOAuthLogin_Call) Return(out completeOAuthLogin.Out, err error) *UsecasesForOAuthCompleteLoginCallback_CompleteOAuthLogin_Call {
	_c.Call.Return(out, err)
	return _c
}

func (_c *UsecasesForOAuthCompleteLoginCallback_CompleteOAuthLogin_Call) RunAndReturn(run func(in completeOAuthLogin.In) (completeOAuthLogin.Out, error)) *UsecasesForOAuthCompleteLoginCallback_CompleteOAuthLogin_Call {
	_c.Call.Return(run)
	return _c
}
