// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mockRegisterHandler

import (
	"github.com/nice-pea/npchat/internal/usecases/users/basic_auth/basic_auth_login"
	mock "github.com/stretchr/testify/mock"
)

// NewUsecasesForLoginByPassword creates a new instance of UsecasesForLoginByPassword. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUsecasesForLoginByPassword(t interface {
	mock.TestingT
	Cleanup(func())
}) *UsecasesForLoginByPassword {
	mock := &UsecasesForLoginByPassword{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// UsecasesForLoginByPassword is an autogenerated mock type for the UsecasesForLoginByPassword type
type UsecasesForLoginByPassword struct {
	mock.Mock
}

type UsecasesForLoginByPassword_Expecter struct {
	mock *mock.Mock
}

func (_m *UsecasesForLoginByPassword) EXPECT() *UsecasesForLoginByPassword_Expecter {
	return &UsecasesForLoginByPassword_Expecter{mock: &_m.Mock}
}

// BasicAuthLogin provides a mock function for the type UsecasesForLoginByPassword
func (_mock *UsecasesForLoginByPassword) BasicAuthLogin(in basicAuthLogin.In) (basicAuthLogin.Out, error) {
	ret := _mock.Called(in)

	if len(ret) == 0 {
		panic("no return value specified for BasicAuthLogin")
	}

	var r0 basicAuthLogin.Out
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(basicAuthLogin.In) (basicAuthLogin.Out, error)); ok {
		return returnFunc(in)
	}
	if returnFunc, ok := ret.Get(0).(func(basicAuthLogin.In) basicAuthLogin.Out); ok {
		r0 = returnFunc(in)
	} else {
		r0 = ret.Get(0).(basicAuthLogin.Out)
	}
	if returnFunc, ok := ret.Get(1).(func(basicAuthLogin.In) error); ok {
		r1 = returnFunc(in)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// UsecasesForLoginByPassword_BasicAuthLogin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BasicAuthLogin'
type UsecasesForLoginByPassword_BasicAuthLogin_Call struct {
	*mock.Call
}

// BasicAuthLogin is a helper method to define mock.On call
//   - in basicAuthLogin.In
func (_e *UsecasesForLoginByPassword_Expecter) BasicAuthLogin(in interface{}) *UsecasesForLoginByPassword_BasicAuthLogin_Call {
	return &UsecasesForLoginByPassword_BasicAuthLogin_Call{Call: _e.mock.On("BasicAuthLogin", in)}
}

func (_c *UsecasesForLoginByPassword_BasicAuthLogin_Call) Run(run func(in basicAuthLogin.In)) *UsecasesForLoginByPassword_BasicAuthLogin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 basicAuthLogin.In
		if args[0] != nil {
			arg0 = args[0].(basicAuthLogin.In)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *UsecasesForLoginByPassword_BasicAuthLogin_Call) Return(out basicAuthLogin.Out, err error) *UsecasesForLoginByPassword_BasicAuthLogin_Call {
	_c.Call.Return(out, err)
	return _c
}

func (_c *UsecasesForLoginByPassword_BasicAuthLogin_Call) RunAndReturn(run func(in basicAuthLogin.In) (basicAuthLogin.Out, error)) *UsecasesForLoginByPassword_BasicAuthLogin_Call {
	_c.Call.Return(run)
	return _c
}
