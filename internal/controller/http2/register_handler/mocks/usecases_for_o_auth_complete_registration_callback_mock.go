// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mockRegisterHandler

import (
	"github.com/nice-pea/npchat/internal/usecases/users/oauth/complete_oauth_registration"
	mock "github.com/stretchr/testify/mock"
)

// NewUsecasesForOAuthCompleteRegistrationCallback creates a new instance of UsecasesForOAuthCompleteRegistrationCallback. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUsecasesForOAuthCompleteRegistrationCallback(t interface {
	mock.TestingT
	Cleanup(func())
}) *UsecasesForOAuthCompleteRegistrationCallback {
	mock := &UsecasesForOAuthCompleteRegistrationCallback{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// UsecasesForOAuthCompleteRegistrationCallback is an autogenerated mock type for the UsecasesForOAuthCompleteRegistrationCallback type
type UsecasesForOAuthCompleteRegistrationCallback struct {
	mock.Mock
}

type UsecasesForOAuthCompleteRegistrationCallback_Expecter struct {
	mock *mock.Mock
}

func (_m *UsecasesForOAuthCompleteRegistrationCallback) EXPECT() *UsecasesForOAuthCompleteRegistrationCallback_Expecter {
	return &UsecasesForOAuthCompleteRegistrationCallback_Expecter{mock: &_m.Mock}
}

// CompleteOAuthRegistration provides a mock function for the type UsecasesForOAuthCompleteRegistrationCallback
func (_mock *UsecasesForOAuthCompleteRegistrationCallback) CompleteOAuthRegistration(in completeOAuthRegistration.In) (completeOAuthRegistration.Out, error) {
	ret := _mock.Called(in)

	if len(ret) == 0 {
		panic("no return value specified for CompleteOAuthRegistration")
	}

	var r0 completeOAuthRegistration.Out
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(completeOAuthRegistration.In) (completeOAuthRegistration.Out, error)); ok {
		return returnFunc(in)
	}
	if returnFunc, ok := ret.Get(0).(func(completeOAuthRegistration.In) completeOAuthRegistration.Out); ok {
		r0 = returnFunc(in)
	} else {
		r0 = ret.Get(0).(completeOAuthRegistration.Out)
	}
	if returnFunc, ok := ret.Get(1).(func(completeOAuthRegistration.In) error); ok {
		r1 = returnFunc(in)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// UsecasesForOAuthCompleteRegistrationCallback_CompleteOAuthRegistration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CompleteOAuthRegistration'
type UsecasesForOAuthCompleteRegistrationCallback_CompleteOAuthRegistration_Call struct {
	*mock.Call
}

// CompleteOAuthRegistration is a helper method to define mock.On call
//   - in completeOAuthRegistration.In
func (_e *UsecasesForOAuthCompleteRegistrationCallback_Expecter) CompleteOAuthRegistration(in interface{}) *UsecasesForOAuthCompleteRegistrationCallback_CompleteOAuthRegistration_Call {
	return &UsecasesForOAuthCompleteRegistrationCallback_CompleteOAuthRegistration_Call{Call: _e.mock.On("CompleteOAuthRegistration", in)}
}

func (_c *UsecasesForOAuthCompleteRegistrationCallback_CompleteOAuthRegistration_Call) Run(run func(in completeOAuthRegistration.In)) *UsecasesForOAuthCompleteRegistrationCallback_CompleteOAuthRegistration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 completeOAuthRegistration.In
		if args[0] != nil {
			arg0 = args[0].(completeOAuthRegistration.In)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *UsecasesForOAuthCompleteRegistrationCallback_CompleteOAuthRegistration_Call) Return(out completeOAuthRegistration.Out, err error) *UsecasesForOAuthCompleteRegistrationCallback_CompleteOAuthRegistration_Call {
	_c.Call.Return(out, err)
	return _c
}

func (_c *UsecasesForOAuthCompleteRegistrationCallback_CompleteOAuthRegistration_Call) RunAndReturn(run func(in completeOAuthRegistration.In) (completeOAuthRegistration.Out, error)) *UsecasesForOAuthCompleteRegistrationCallback_CompleteOAuthRegistration_Call {
	_c.Call.Return(run)
	return _c
}
