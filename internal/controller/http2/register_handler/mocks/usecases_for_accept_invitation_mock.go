// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mockRegisterHandler

import (
	"github.com/nice-pea/npchat/internal/usecases/chats/accept_invitation"
	"github.com/nice-pea/npchat/internal/usecases/sessions/find_session"
	mock "github.com/stretchr/testify/mock"
)

// NewUsecasesForAcceptInvitation creates a new instance of UsecasesForAcceptInvitation. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUsecasesForAcceptInvitation(t interface {
	mock.TestingT
	Cleanup(func())
}) *UsecasesForAcceptInvitation {
	mock := &UsecasesForAcceptInvitation{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// UsecasesForAcceptInvitation is an autogenerated mock type for the UsecasesForAcceptInvitation type
type UsecasesForAcceptInvitation struct {
	mock.Mock
}

type UsecasesForAcceptInvitation_Expecter struct {
	mock *mock.Mock
}

func (_m *UsecasesForAcceptInvitation) EXPECT() *UsecasesForAcceptInvitation_Expecter {
	return &UsecasesForAcceptInvitation_Expecter{mock: &_m.Mock}
}

// AcceptInvitation provides a mock function for the type UsecasesForAcceptInvitation
func (_mock *UsecasesForAcceptInvitation) AcceptInvitation(in acceptInvitation.In) (acceptInvitation.Out, error) {
	ret := _mock.Called(in)

	if len(ret) == 0 {
		panic("no return value specified for AcceptInvitation")
	}

	var r0 acceptInvitation.Out
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(acceptInvitation.In) (acceptInvitation.Out, error)); ok {
		return returnFunc(in)
	}
	if returnFunc, ok := ret.Get(0).(func(acceptInvitation.In) acceptInvitation.Out); ok {
		r0 = returnFunc(in)
	} else {
		r0 = ret.Get(0).(acceptInvitation.Out)
	}
	if returnFunc, ok := ret.Get(1).(func(acceptInvitation.In) error); ok {
		r1 = returnFunc(in)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// UsecasesForAcceptInvitation_AcceptInvitation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AcceptInvitation'
type UsecasesForAcceptInvitation_AcceptInvitation_Call struct {
	*mock.Call
}

// AcceptInvitation is a helper method to define mock.On call
//   - in acceptInvitation.In
func (_e *UsecasesForAcceptInvitation_Expecter) AcceptInvitation(in interface{}) *UsecasesForAcceptInvitation_AcceptInvitation_Call {
	return &UsecasesForAcceptInvitation_AcceptInvitation_Call{Call: _e.mock.On("AcceptInvitation", in)}
}

func (_c *UsecasesForAcceptInvitation_AcceptInvitation_Call) Run(run func(in acceptInvitation.In)) *UsecasesForAcceptInvitation_AcceptInvitation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 acceptInvitation.In
		if args[0] != nil {
			arg0 = args[0].(acceptInvitation.In)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *UsecasesForAcceptInvitation_AcceptInvitation_Call) Return(out acceptInvitation.Out, err error) *UsecasesForAcceptInvitation_AcceptInvitation_Call {
	_c.Call.Return(out, err)
	return _c
}

func (_c *UsecasesForAcceptInvitation_AcceptInvitation_Call) RunAndReturn(run func(in acceptInvitation.In) (acceptInvitation.Out, error)) *UsecasesForAcceptInvitation_AcceptInvitation_Call {
	_c.Call.Return(run)
	return _c
}

// FindSessions provides a mock function for the type UsecasesForAcceptInvitation
func (_mock *UsecasesForAcceptInvitation) FindSessions(in findSession.In) (findSession.Out, error) {
	ret := _mock.Called(in)

	if len(ret) == 0 {
		panic("no return value specified for FindSessions")
	}

	var r0 findSession.Out
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(findSession.In) (findSession.Out, error)); ok {
		return returnFunc(in)
	}
	if returnFunc, ok := ret.Get(0).(func(findSession.In) findSession.Out); ok {
		r0 = returnFunc(in)
	} else {
		r0 = ret.Get(0).(findSession.Out)
	}
	if returnFunc, ok := ret.Get(1).(func(findSession.In) error); ok {
		r1 = returnFunc(in)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// UsecasesForAcceptInvitation_FindSessions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindSessions'
type UsecasesForAcceptInvitation_FindSessions_Call struct {
	*mock.Call
}

// FindSessions is a helper method to define mock.On call
//   - in findSession.In
func (_e *UsecasesForAcceptInvitation_Expecter) FindSessions(in interface{}) *UsecasesForAcceptInvitation_FindSessions_Call {
	return &UsecasesForAcceptInvitation_FindSessions_Call{Call: _e.mock.On("FindSessions", in)}
}

func (_c *UsecasesForAcceptInvitation_FindSessions_Call) Run(run func(in findSession.In)) *UsecasesForAcceptInvitation_FindSessions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 findSession.In
		if args[0] != nil {
			arg0 = args[0].(findSession.In)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *UsecasesForAcceptInvitation_FindSessions_Call) Return(out findSession.Out, err error) *UsecasesForAcceptInvitation_FindSessions_Call {
	_c.Call.Return(out, err)
	return _c
}

func (_c *UsecasesForAcceptInvitation_FindSessions_Call) RunAndReturn(run func(in findSession.In) (findSession.Out, error)) *UsecasesForAcceptInvitation_FindSessions_Call {
	_c.Call.Return(run)
	return _c
}
