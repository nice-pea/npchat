// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mockRegisterHandler

import (
	"github.com/nice-pea/npchat/internal/usecases/users/oauth/oauth_authorize"
	mock "github.com/stretchr/testify/mock"
)

// NewUsecasesForOauthAuthorize creates a new instance of UsecasesForOauthAuthorize. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUsecasesForOauthAuthorize(t interface {
	mock.TestingT
	Cleanup(func())
}) *UsecasesForOauthAuthorize {
	mock := &UsecasesForOauthAuthorize{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// UsecasesForOauthAuthorize is an autogenerated mock type for the UsecasesForOauthAuthorize type
type UsecasesForOauthAuthorize struct {
	mock.Mock
}

type UsecasesForOauthAuthorize_Expecter struct {
	mock *mock.Mock
}

func (_m *UsecasesForOauthAuthorize) EXPECT() *UsecasesForOauthAuthorize_Expecter {
	return &UsecasesForOauthAuthorize_Expecter{mock: &_m.Mock}
}

// OauthAuthorize provides a mock function for the type UsecasesForOauthAuthorize
func (_mock *UsecasesForOauthAuthorize) OauthAuthorize(in oauthAuthorize.In) (oauthAuthorize.Out, error) {
	ret := _mock.Called(in)

	if len(ret) == 0 {
		panic("no return value specified for OauthAuthorize")
	}

	var r0 oauthAuthorize.Out
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(oauthAuthorize.In) (oauthAuthorize.Out, error)); ok {
		return returnFunc(in)
	}
	if returnFunc, ok := ret.Get(0).(func(oauthAuthorize.In) oauthAuthorize.Out); ok {
		r0 = returnFunc(in)
	} else {
		r0 = ret.Get(0).(oauthAuthorize.Out)
	}
	if returnFunc, ok := ret.Get(1).(func(oauthAuthorize.In) error); ok {
		r1 = returnFunc(in)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// UsecasesForOauthAuthorize_OauthAuthorize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OauthAuthorize'
type UsecasesForOauthAuthorize_OauthAuthorize_Call struct {
	*mock.Call
}

// OauthAuthorize is a helper method to define mock.On call
//   - in oauthAuthorize.In
func (_e *UsecasesForOauthAuthorize_Expecter) OauthAuthorize(in interface{}) *UsecasesForOauthAuthorize_OauthAuthorize_Call {
	return &UsecasesForOauthAuthorize_OauthAuthorize_Call{Call: _e.mock.On("OauthAuthorize", in)}
}

func (_c *UsecasesForOauthAuthorize_OauthAuthorize_Call) Run(run func(in oauthAuthorize.In)) *UsecasesForOauthAuthorize_OauthAuthorize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 oauthAuthorize.In
		if args[0] != nil {
			arg0 = args[0].(oauthAuthorize.In)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *UsecasesForOauthAuthorize_OauthAuthorize_Call) Return(out oauthAuthorize.Out, err error) *UsecasesForOauthAuthorize_OauthAuthorize_Call {
	_c.Call.Return(out, err)
	return _c
}

func (_c *UsecasesForOauthAuthorize_OauthAuthorize_Call) RunAndReturn(run func(in oauthAuthorize.In) (oauthAuthorize.Out, error)) *UsecasesForOauthAuthorize_OauthAuthorize_Call {
	_c.Call.Return(run)
	return _c
}
