// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mockRegisterHandler

import (
	"github.com/nice-pea/npchat/internal/domain/sessionn"
	mock "github.com/stretchr/testify/mock"
)

// NewJwtIssuer creates a new instance of JwtIssuer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewJwtIssuer(t interface {
	mock.TestingT
	Cleanup(func())
}) *JwtIssuer {
	mock := &JwtIssuer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// JwtIssuer is an autogenerated mock type for the JwtIssuer type
type JwtIssuer struct {
	mock.Mock
}

type JwtIssuer_Expecter struct {
	mock *mock.Mock
}

func (_m *JwtIssuer) EXPECT() *JwtIssuer_Expecter {
	return &JwtIssuer_Expecter{mock: &_m.Mock}
}

// Issue provides a mock function for the type JwtIssuer
func (_mock *JwtIssuer) Issue(session sessionn.Session) (string, error) {
	ret := _mock.Called(session)

	if len(ret) == 0 {
		panic("no return value specified for Issue")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(sessionn.Session) (string, error)); ok {
		return returnFunc(session)
	}
	if returnFunc, ok := ret.Get(0).(func(sessionn.Session) string); ok {
		r0 = returnFunc(session)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(sessionn.Session) error); ok {
		r1 = returnFunc(session)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// JwtIssuer_Issue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Issue'
type JwtIssuer_Issue_Call struct {
	*mock.Call
}

// Issue is a helper method to define mock.On call
//   - session sessionn.Session
func (_e *JwtIssuer_Expecter) Issue(session interface{}) *JwtIssuer_Issue_Call {
	return &JwtIssuer_Issue_Call{Call: _e.mock.On("Issue", session)}
}

func (_c *JwtIssuer_Issue_Call) Run(run func(session sessionn.Session)) *JwtIssuer_Issue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 sessionn.Session
		if args[0] != nil {
			arg0 = args[0].(sessionn.Session)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *JwtIssuer_Issue_Call) Return(s string, err error) *JwtIssuer_Issue_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *JwtIssuer_Issue_Call) RunAndReturn(run func(session sessionn.Session) (string, error)) *JwtIssuer_Issue_Call {
	_c.Call.Return(run)
	return _c
}
