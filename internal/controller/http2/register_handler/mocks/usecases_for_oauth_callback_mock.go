// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mockRegisterHandler

import (
	"github.com/nice-pea/npchat/internal/usecases/users/oauth/oauth_complete"
	mock "github.com/stretchr/testify/mock"
)

// NewUsecasesForOauthCallback creates a new instance of UsecasesForOauthCallback. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUsecasesForOauthCallback(t interface {
	mock.TestingT
	Cleanup(func())
}) *UsecasesForOauthCallback {
	mock := &UsecasesForOauthCallback{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// UsecasesForOauthCallback is an autogenerated mock type for the UsecasesForOauthCallback type
type UsecasesForOauthCallback struct {
	mock.Mock
}

type UsecasesForOauthCallback_Expecter struct {
	mock *mock.Mock
}

func (_m *UsecasesForOauthCallback) EXPECT() *UsecasesForOauthCallback_Expecter {
	return &UsecasesForOauthCallback_Expecter{mock: &_m.Mock}
}

// OauthComplete provides a mock function for the type UsecasesForOauthCallback
func (_mock *UsecasesForOauthCallback) OauthComplete(in oauthComplete.In) (oauthComplete.Out, error) {
	ret := _mock.Called(in)

	if len(ret) == 0 {
		panic("no return value specified for OauthComplete")
	}

	var r0 oauthComplete.Out
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(oauthComplete.In) (oauthComplete.Out, error)); ok {
		return returnFunc(in)
	}
	if returnFunc, ok := ret.Get(0).(func(oauthComplete.In) oauthComplete.Out); ok {
		r0 = returnFunc(in)
	} else {
		r0 = ret.Get(0).(oauthComplete.Out)
	}
	if returnFunc, ok := ret.Get(1).(func(oauthComplete.In) error); ok {
		r1 = returnFunc(in)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// UsecasesForOauthCallback_OauthComplete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OauthComplete'
type UsecasesForOauthCallback_OauthComplete_Call struct {
	*mock.Call
}

// OauthComplete is a helper method to define mock.On call
//   - in oauthComplete.In
func (_e *UsecasesForOauthCallback_Expecter) OauthComplete(in interface{}) *UsecasesForOauthCallback_OauthComplete_Call {
	return &UsecasesForOauthCallback_OauthComplete_Call{Call: _e.mock.On("OauthComplete", in)}
}

func (_c *UsecasesForOauthCallback_OauthComplete_Call) Run(run func(in oauthComplete.In)) *UsecasesForOauthCallback_OauthComplete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 oauthComplete.In
		if args[0] != nil {
			arg0 = args[0].(oauthComplete.In)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *UsecasesForOauthCallback_OauthComplete_Call) Return(out oauthComplete.Out, err error) *UsecasesForOauthCallback_OauthComplete_Call {
	_c.Call.Return(out, err)
	return _c
}

func (_c *UsecasesForOauthCallback_OauthComplete_Call) RunAndReturn(run func(in oauthComplete.In) (oauthComplete.Out, error)) *UsecasesForOauthCallback_OauthComplete_Call {
	_c.Call.Return(run)
	return _c
}
