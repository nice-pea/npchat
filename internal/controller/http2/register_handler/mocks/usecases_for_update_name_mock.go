// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mockRegisterHandler

import (
	"github.com/nice-pea/npchat/internal/usecases/chats/update_name"
	"github.com/nice-pea/npchat/internal/usecases/sessions/find_session"
	mock "github.com/stretchr/testify/mock"
)

// NewUsecasesForUpdateName creates a new instance of UsecasesForUpdateName. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUsecasesForUpdateName(t interface {
	mock.TestingT
	Cleanup(func())
}) *UsecasesForUpdateName {
	mock := &UsecasesForUpdateName{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// UsecasesForUpdateName is an autogenerated mock type for the UsecasesForUpdateName type
type UsecasesForUpdateName struct {
	mock.Mock
}

type UsecasesForUpdateName_Expecter struct {
	mock *mock.Mock
}

func (_m *UsecasesForUpdateName) EXPECT() *UsecasesForUpdateName_Expecter {
	return &UsecasesForUpdateName_Expecter{mock: &_m.Mock}
}

// FindSessions provides a mock function for the type UsecasesForUpdateName
func (_mock *UsecasesForUpdateName) FindSessions(in findSession.In) (findSession.Out, error) {
	ret := _mock.Called(in)

	if len(ret) == 0 {
		panic("no return value specified for FindSessions")
	}

	var r0 findSession.Out
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(findSession.In) (findSession.Out, error)); ok {
		return returnFunc(in)
	}
	if returnFunc, ok := ret.Get(0).(func(findSession.In) findSession.Out); ok {
		r0 = returnFunc(in)
	} else {
		r0 = ret.Get(0).(findSession.Out)
	}
	if returnFunc, ok := ret.Get(1).(func(findSession.In) error); ok {
		r1 = returnFunc(in)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// UsecasesForUpdateName_FindSessions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindSessions'
type UsecasesForUpdateName_FindSessions_Call struct {
	*mock.Call
}

// FindSessions is a helper method to define mock.On call
//   - in findSession.In
func (_e *UsecasesForUpdateName_Expecter) FindSessions(in interface{}) *UsecasesForUpdateName_FindSessions_Call {
	return &UsecasesForUpdateName_FindSessions_Call{Call: _e.mock.On("FindSessions", in)}
}

func (_c *UsecasesForUpdateName_FindSessions_Call) Run(run func(in findSession.In)) *UsecasesForUpdateName_FindSessions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 findSession.In
		if args[0] != nil {
			arg0 = args[0].(findSession.In)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *UsecasesForUpdateName_FindSessions_Call) Return(out findSession.Out, err error) *UsecasesForUpdateName_FindSessions_Call {
	_c.Call.Return(out, err)
	return _c
}

func (_c *UsecasesForUpdateName_FindSessions_Call) RunAndReturn(run func(in findSession.In) (findSession.Out, error)) *UsecasesForUpdateName_FindSessions_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateName provides a mock function for the type UsecasesForUpdateName
func (_mock *UsecasesForUpdateName) UpdateName(in updateName.In) (updateName.Out, error) {
	ret := _mock.Called(in)

	if len(ret) == 0 {
		panic("no return value specified for UpdateName")
	}

	var r0 updateName.Out
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(updateName.In) (updateName.Out, error)); ok {
		return returnFunc(in)
	}
	if returnFunc, ok := ret.Get(0).(func(updateName.In) updateName.Out); ok {
		r0 = returnFunc(in)
	} else {
		r0 = ret.Get(0).(updateName.Out)
	}
	if returnFunc, ok := ret.Get(1).(func(updateName.In) error); ok {
		r1 = returnFunc(in)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// UsecasesForUpdateName_UpdateName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateName'
type UsecasesForUpdateName_UpdateName_Call struct {
	*mock.Call
}

// UpdateName is a helper method to define mock.On call
//   - in updateName.In
func (_e *UsecasesForUpdateName_Expecter) UpdateName(in interface{}) *UsecasesForUpdateName_UpdateName_Call {
	return &UsecasesForUpdateName_UpdateName_Call{Call: _e.mock.On("UpdateName", in)}
}

func (_c *UsecasesForUpdateName_UpdateName_Call) Run(run func(in updateName.In)) *UsecasesForUpdateName_UpdateName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 updateName.In
		if args[0] != nil {
			arg0 = args[0].(updateName.In)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *UsecasesForUpdateName_UpdateName_Call) Return(out updateName.Out, err error) *UsecasesForUpdateName_UpdateName_Call {
	_c.Call.Return(out, err)
	return _c
}

func (_c *UsecasesForUpdateName_UpdateName_Call) RunAndReturn(run func(in updateName.In) (updateName.Out, error)) *UsecasesForUpdateName_UpdateName_Call {
	_c.Call.Return(run)
	return _c
}
