// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mockRegisterHandler

import (
	"context"

	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// NewEventListener creates a new instance of EventListener. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEventListener(t interface {
	mock.TestingT
	Cleanup(func())
}) *EventListener {
	mock := &EventListener{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// EventListener is an autogenerated mock type for the EventListener type
type EventListener struct {
	mock.Mock
}

type EventListener_Expecter struct {
	mock *mock.Mock
}

func (_m *EventListener) EXPECT() *EventListener_Expecter {
	return &EventListener_Expecter{mock: &_m.Mock}
}

// Listen provides a mock function for the type EventListener
func (_mock *EventListener) Listen(ctx context.Context, userID uuid.UUID, sessionID uuid.UUID, f func(event any)) error {
	ret := _mock.Called(ctx, userID, sessionID, f)

	if len(ret) == 0 {
		panic("no return value specified for Listen")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, func(event any)) error); ok {
		r0 = returnFunc(ctx, userID, sessionID, f)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// EventListener_Listen_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Listen'
type EventListener_Listen_Call struct {
	*mock.Call
}

// Listen is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uuid.UUID
//   - sessionID uuid.UUID
//   - f func(event any)
func (_e *EventListener_Expecter) Listen(ctx interface{}, userID interface{}, sessionID interface{}, f interface{}) *EventListener_Listen_Call {
	return &EventListener_Listen_Call{Call: _e.mock.On("Listen", ctx, userID, sessionID, f)}
}

func (_c *EventListener_Listen_Call) Run(run func(ctx context.Context, userID uuid.UUID, sessionID uuid.UUID, f func(event any))) *EventListener_Listen_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		var arg2 uuid.UUID
		if args[2] != nil {
			arg2 = args[2].(uuid.UUID)
		}
		var arg3 func(event any)
		if args[3] != nil {
			arg3 = args[3].(func(event any))
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *EventListener_Listen_Call) Return(err error) *EventListener_Listen_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *EventListener_Listen_Call) RunAndReturn(run func(ctx context.Context, userID uuid.UUID, sessionID uuid.UUID, f func(event any)) error) *EventListener_Listen_Call {
	_c.Call.Return(run)
	return _c
}
