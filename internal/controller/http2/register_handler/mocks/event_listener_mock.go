// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mockRegisterHandler

import (
	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// NewEventListener creates a new instance of EventListener. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEventListener(t interface {
	mock.TestingT
	Cleanup(func())
}) *EventListener {
	mock := &EventListener{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// EventListener is an autogenerated mock type for the EventListener type
type EventListener struct {
	mock.Mock
}

type EventListener_Expecter struct {
	mock *mock.Mock
}

func (_m *EventListener) EXPECT() *EventListener_Expecter {
	return &EventListener_Expecter{mock: &_m.Mock}
}

// AddListener provides a mock function for the type EventListener
func (_mock *EventListener) AddListener(userID uuid.UUID, sessionID uuid.UUID, f func(event any, err error)) (func(), error) {
	ret := _mock.Called(userID, sessionID, f)

	if len(ret) == 0 {
		panic("no return value specified for AddListener")
	}

	var r0 func()
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID, func(event any, err error)) (func(), error)); ok {
		return returnFunc(userID, sessionID, f)
	}
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID, func(event any, err error)) func()); ok {
		r0 = returnFunc(userID, sessionID, f)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(func())
		}
	}
	if returnFunc, ok := ret.Get(1).(func(uuid.UUID, uuid.UUID, func(event any, err error)) error); ok {
		r1 = returnFunc(userID, sessionID, f)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// EventListener_AddListener_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddListener'
type EventListener_AddListener_Call struct {
	*mock.Call
}

// AddListener is a helper method to define mock.On call
//   - userID uuid.UUID
//   - sessionID uuid.UUID
//   - f func(event any, err error)
func (_e *EventListener_Expecter) AddListener(userID interface{}, sessionID interface{}, f interface{}) *EventListener_AddListener_Call {
	return &EventListener_AddListener_Call{Call: _e.mock.On("AddListener", userID, sessionID, f)}
}

func (_c *EventListener_AddListener_Call) Run(run func(userID uuid.UUID, sessionID uuid.UUID, f func(event any, err error))) *EventListener_AddListener_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 uuid.UUID
		if args[0] != nil {
			arg0 = args[0].(uuid.UUID)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		var arg2 func(event any, err error)
		if args[2] != nil {
			arg2 = args[2].(func(event any, err error))
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *EventListener_AddListener_Call) Return(removeListener func(), err error) *EventListener_AddListener_Call {
	_c.Call.Return(removeListener, err)
	return _c
}

func (_c *EventListener_AddListener_Call) RunAndReturn(run func(userID uuid.UUID, sessionID uuid.UUID, f func(event any, err error)) (func(), error)) *EventListener_AddListener_Call {
	_c.Call.Return(run)
	return _c
}
