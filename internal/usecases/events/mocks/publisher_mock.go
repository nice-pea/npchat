// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mockEvents

import (
	"github.com/nice-pea/npchat/internal/usecases/events"
	mock "github.com/stretchr/testify/mock"
)

// NewPublisher creates a new instance of Publisher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPublisher(t interface {
	mock.TestingT
	Cleanup(func())
}) *Publisher {
	mock := &Publisher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Publisher is an autogenerated mock type for the Publisher type
type Publisher struct {
	mock.Mock
}

type Publisher_Expecter struct {
	mock *mock.Mock
}

func (_m *Publisher) EXPECT() *Publisher_Expecter {
	return &Publisher_Expecter{mock: &_m.Mock}
}

// Publish provides a mock function for the type Publisher
func (_mock *Publisher) Publish(e *events.Buffer) error {
	ret := _mock.Called(e)

	if len(ret) == 0 {
		panic("no return value specified for Publish")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*events.Buffer) error); ok {
		r0 = returnFunc(e)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Publisher_Publish_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Publish'
type Publisher_Publish_Call struct {
	*mock.Call
}

// Publish is a helper method to define mock.On call
//   - e *events.Buffer
func (_e *Publisher_Expecter) Publish(e interface{}) *Publisher_Publish_Call {
	return &Publisher_Publish_Call{Call: _e.mock.On("Publish", e)}
}

func (_c *Publisher_Publish_Call) Run(run func(e *events.Buffer)) *Publisher_Publish_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *events.Buffer
		if args[0] != nil {
			arg0 = args[0].(*events.Buffer)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Publisher_Publish_Call) Return(err error) *Publisher_Publish_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Publisher_Publish_Call) RunAndReturn(run func(e *events.Buffer) error) *Publisher_Publish_Call {
	_c.Call.Return(run)
	return _c
}
