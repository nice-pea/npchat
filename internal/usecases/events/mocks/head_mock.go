// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mockEvents

import (
	"time"

	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// NewHead creates a new instance of Head. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHead(t interface {
	mock.TestingT
	Cleanup(func())
}) *Head {
	mock := &Head{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Head is an autogenerated mock type for the Head type
type Head struct {
	mock.Mock
}

type Head_Expecter struct {
	mock *mock.Mock
}

func (_m *Head) EXPECT() *Head_Expecter {
	return &Head_Expecter{mock: &_m.Mock}
}

// CreatedIn provides a mock function for the type Head
func (_mock *Head) CreatedIn() time.Time {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for CreatedIn")
	}

	var r0 time.Time
	if returnFunc, ok := ret.Get(0).(func() time.Time); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(time.Time)
	}
	return r0
}

// Head_CreatedIn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatedIn'
type Head_CreatedIn_Call struct {
	*mock.Call
}

// CreatedIn is a helper method to define mock.On call
func (_e *Head_Expecter) CreatedIn() *Head_CreatedIn_Call {
	return &Head_CreatedIn_Call{Call: _e.mock.On("CreatedIn")}
}

func (_c *Head_CreatedIn_Call) Run(run func()) *Head_CreatedIn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Head_CreatedIn_Call) Return(time1 time.Time) *Head_CreatedIn_Call {
	_c.Call.Return(time1)
	return _c
}

func (_c *Head_CreatedIn_Call) RunAndReturn(run func() time.Time) *Head_CreatedIn_Call {
	_c.Call.Return(run)
	return _c
}

// Recipients provides a mock function for the type Head
func (_mock *Head) Recipients() []uuid.UUID {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Recipients")
	}

	var r0 []uuid.UUID
	if returnFunc, ok := ret.Get(0).(func() []uuid.UUID); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]uuid.UUID)
		}
	}
	return r0
}

// Head_Recipients_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Recipients'
type Head_Recipients_Call struct {
	*mock.Call
}

// Recipients is a helper method to define mock.On call
func (_e *Head_Expecter) Recipients() *Head_Recipients_Call {
	return &Head_Recipients_Call{Call: _e.mock.On("Recipients")}
}

func (_c *Head_Recipients_Call) Run(run func()) *Head_Recipients_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Head_Recipients_Call) Return(uUIDs []uuid.UUID) *Head_Recipients_Call {
	_c.Call.Return(uUIDs)
	return _c
}

func (_c *Head_Recipients_Call) RunAndReturn(run func() []uuid.UUID) *Head_Recipients_Call {
	_c.Call.Return(run)
	return _c
}
