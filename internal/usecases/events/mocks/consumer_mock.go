// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mockEvents

import (
	"github.com/nice-pea/npchat/internal/usecases/events"
	mock "github.com/stretchr/testify/mock"
)

// NewConsumer creates a new instance of Consumer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewConsumer(t interface {
	mock.TestingT
	Cleanup(func())
}) *Consumer {
	mock := &Consumer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Consumer is an autogenerated mock type for the Consumer type
type Consumer struct {
	mock.Mock
}

type Consumer_Expecter struct {
	mock *mock.Mock
}

func (_m *Consumer) EXPECT() *Consumer_Expecter {
	return &Consumer_Expecter{mock: &_m.Mock}
}

// Consume provides a mock function for the type Consumer
func (_mock *Consumer) Consume(events1 []events.Event) {
	_mock.Called(events1)
	return
}

// Consumer_Consume_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Consume'
type Consumer_Consume_Call struct {
	*mock.Call
}

// Consume is a helper method to define mock.On call
//   - events1 []events.Event
func (_e *Consumer_Expecter) Consume(events1 interface{}) *Consumer_Consume_Call {
	return &Consumer_Consume_Call{Call: _e.mock.On("Consume", events1)}
}

func (_c *Consumer_Consume_Call) Run(run func(events1 []events.Event)) *Consumer_Consume_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []events.Event
		if args[0] != nil {
			arg0 = args[0].([]events.Event)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Consumer_Consume_Call) Return() *Consumer_Consume_Call {
	_c.Call.Return()
	return _c
}

func (_c *Consumer_Consume_Call) RunAndReturn(run func(events1 []events.Event)) *Consumer_Consume_Call {
	_c.Run(run)
	return _c
}
