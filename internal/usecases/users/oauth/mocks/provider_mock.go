// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mockOauth

import (
	"github.com/nice-pea/npchat/internal/domain/userr"
	mock "github.com/stretchr/testify/mock"
)

// NewProvider creates a new instance of Provider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *Provider {
	mock := &Provider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Provider is an autogenerated mock type for the Provider type
type Provider struct {
	mock.Mock
}

type Provider_Expecter struct {
	mock *mock.Mock
}

func (_m *Provider) EXPECT() *Provider_Expecter {
	return &Provider_Expecter{mock: &_m.Mock}
}

// AuthorizationURL provides a mock function for the type Provider
func (_mock *Provider) AuthorizationURL(state string) string {
	ret := _mock.Called(state)

	if len(ret) == 0 {
		panic("no return value specified for AuthorizationURL")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func(string) string); ok {
		r0 = returnFunc(state)
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// Provider_AuthorizationURL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AuthorizationURL'
type Provider_AuthorizationURL_Call struct {
	*mock.Call
}

// AuthorizationURL is a helper method to define mock.On call
//   - state string
func (_e *Provider_Expecter) AuthorizationURL(state interface{}) *Provider_AuthorizationURL_Call {
	return &Provider_AuthorizationURL_Call{Call: _e.mock.On("AuthorizationURL", state)}
}

func (_c *Provider_AuthorizationURL_Call) Run(run func(state string)) *Provider_AuthorizationURL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Provider_AuthorizationURL_Call) Return(s string) *Provider_AuthorizationURL_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *Provider_AuthorizationURL_Call) RunAndReturn(run func(state string) string) *Provider_AuthorizationURL_Call {
	_c.Call.Return(run)
	return _c
}

// Exchange provides a mock function for the type Provider
func (_mock *Provider) Exchange(code string) (userr.OpenAuthToken, error) {
	ret := _mock.Called(code)

	if len(ret) == 0 {
		panic("no return value specified for Exchange")
	}

	var r0 userr.OpenAuthToken
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (userr.OpenAuthToken, error)); ok {
		return returnFunc(code)
	}
	if returnFunc, ok := ret.Get(0).(func(string) userr.OpenAuthToken); ok {
		r0 = returnFunc(code)
	} else {
		r0 = ret.Get(0).(userr.OpenAuthToken)
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(code)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Provider_Exchange_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exchange'
type Provider_Exchange_Call struct {
	*mock.Call
}

// Exchange is a helper method to define mock.On call
//   - code string
func (_e *Provider_Expecter) Exchange(code interface{}) *Provider_Exchange_Call {
	return &Provider_Exchange_Call{Call: _e.mock.On("Exchange", code)}
}

func (_c *Provider_Exchange_Call) Run(run func(code string)) *Provider_Exchange_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Provider_Exchange_Call) Return(openAuthToken userr.OpenAuthToken, err error) *Provider_Exchange_Call {
	_c.Call.Return(openAuthToken, err)
	return _c
}

func (_c *Provider_Exchange_Call) RunAndReturn(run func(code string) (userr.OpenAuthToken, error)) *Provider_Exchange_Call {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function for the type Provider
func (_mock *Provider) Name() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// Provider_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type Provider_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *Provider_Expecter) Name() *Provider_Name_Call {
	return &Provider_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *Provider_Name_Call) Run(run func()) *Provider_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Provider_Name_Call) Return(s string) *Provider_Name_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *Provider_Name_Call) RunAndReturn(run func() string) *Provider_Name_Call {
	_c.Call.Return(run)
	return _c
}

// User provides a mock function for the type Provider
func (_mock *Provider) User(token userr.OpenAuthToken) (userr.OpenAuthUser, error) {
	ret := _mock.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for User")
	}

	var r0 userr.OpenAuthUser
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(userr.OpenAuthToken) (userr.OpenAuthUser, error)); ok {
		return returnFunc(token)
	}
	if returnFunc, ok := ret.Get(0).(func(userr.OpenAuthToken) userr.OpenAuthUser); ok {
		r0 = returnFunc(token)
	} else {
		r0 = ret.Get(0).(userr.OpenAuthUser)
	}
	if returnFunc, ok := ret.Get(1).(func(userr.OpenAuthToken) error); ok {
		r1 = returnFunc(token)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Provider_User_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'User'
type Provider_User_Call struct {
	*mock.Call
}

// User is a helper method to define mock.On call
//   - token userr.OpenAuthToken
func (_e *Provider_Expecter) User(token interface{}) *Provider_User_Call {
	return &Provider_User_Call{Call: _e.mock.On("User", token)}
}

func (_c *Provider_User_Call) Run(run func(token userr.OpenAuthToken)) *Provider_User_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 userr.OpenAuthToken
		if args[0] != nil {
			arg0 = args[0].(userr.OpenAuthToken)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Provider_User_Call) Return(openAuthUser userr.OpenAuthUser, err error) *Provider_User_Call {
	_c.Call.Return(openAuthUser, err)
	return _c
}

func (_c *Provider_User_Call) RunAndReturn(run func(token userr.OpenAuthToken) (userr.OpenAuthUser, error)) *Provider_User_Call {
	_c.Call.Return(run)
	return _c
}
