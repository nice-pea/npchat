# –°—Ç—è–Ω—É—Ç—å –æ–±—Ä–∞–∑ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å docker-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –≤ —Ä–∞–±–æ—á–µ–π —Å—Ä–µ–¥–µ
name: CD/Deploy

on:
  workflow_dispatch:
    inputs:
      tag:
        type: string
        description: '—Ç–µ–≥ docker-–æ–±—Ä–∞–∑–∞ –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è'

permissions:
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ docker-–æ–±—Ä–∞–∑–∞
        # Written with gigacode
        id: check-image
        run: |
          TAG=${{ inputs.tag || github.ref_name }}
          IMAGE_NAME=${{ vars.DOCKER_IMAGE_NAME }}

          echo "–ü—Ä–æ–≤–µ—Ä—è—é —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–∑–∞ $IMAGE_NAME:$TAG..."

          # –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ registry
          docker login -u "${{ secrets.DOCKER_USERNAME }}" -p "${{ secrets.DOCKER_PASSWORD }}"

          # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞–Ω–∏—Ñ–µ—Å—Ç–µ –æ–±—Ä–∞–∑–∞
          if ! docker manifest inspect "$IMAGE_NAME:$TAG" > /dev/null 2>&1; then
            echo "‚ùå –û–±—Ä–∞–∑ $IMAGE_NAME:$TAG –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ registry."
            exit 1
          else
            echo "‚úÖ –û–±—Ä–∞–∑ $IMAGE_NAME:$TAG —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."
          fi

      - name: –†–∞–∑–≤–µ—Ä–Ω—É—Ç—å –Ω–æ–≤—ã–π –æ–±—Ä–∞–∑
        uses: appleboy/ssh-action@v1.2.2
        # continue-on-error: true
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          port: ${{ secrets.SSH_PORT }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            set -e
            NEW_IMAGE=${{ inputs.tag || github.ref_name }}
            CONTAINER_NAME=npc.npchat
            PREV_IMAGE=$(docker inspect --format='{{.Config.Image}}' $CONTAINER_NAME 2>/dev/null | sed 's/^.*://')
            
            echo "–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ $CONTAINER_NAME:$NEW_IMAGE..."
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
            docker stop $CONTAINER_NAME || true
            docker rm $CONTAINER_NAME || true
            
            # –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è, —á—Ç–æ–±—ã –±—ã–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ docker-compose
            set -o allexport
            source /opt/npchat/.env.production
            set +o allexport
            
            # –ù–∞–∑–≤–∞–Ω–∏–µ –æ–±—Ä–∞–∑–∞
            export IMAGE_NAME=${{ vars.DOCKER_IMAGE_NAME }}
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π
            if IMAGE_TAG=$NEW_IMAGE docker compose -f /opt/npchat/infra/npchat/docker-compose.yaml up --wait npc.npchat; then
              echo "‚úÖ –£—Å–ø–µ—à–Ω–æ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç $CONTAINER_NAME:$NEW_IMAGE"
              exit 0
            fi
            
            echo "‚ùå –†–∞–∑–≤–µ—Ä–Ω—É—Ç—å $CONTAINER_NAME:$NEW_IMAGE –Ω–µ —É–¥–∞–ª–æ—Å—å"
            
            # –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
            if [ -n "$PREV_IMAGE" ]; then
              echo "üîÑ –û—Ç–∫–∞—Ç –∫ $CONTAINER_NAME:$PREV_IMAGE..."
              IMAGE_TAG=$PREV_IMAGE docker compose -f /opt/npchat/infra/npchat/docker-compose.yaml up --wait npc.npchat
              echo "üÜó –£—Å–ø–µ—à–Ω–æ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–∞ –ø—Ä–æ—à–ª–∞—è –≤–µ—Ä—Å–∏—è $CONTAINER_NAME:$NEW_IMAGE"
            fi
            
            exit 2